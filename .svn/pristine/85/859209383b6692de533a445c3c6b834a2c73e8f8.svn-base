/*
--------------------------------------- CHANGE LOG ---------------------------------------
Date(DD/MM/YY)        Author    Version         Remarks
------------------------------------------------------------------------------------------
16/06/2023            SawYN     1.0.0           - Create Table component
29/06/2023            SawYN     1.0.1           - Improve table functionalities (add in sort, checked list)
04/07/2023            SawYN     1.0.2           - Improve table functionality (change position)

*/
/** @jsxImportSource @emotion/react */
import React, { Dispatch, SetStateAction, useEffect, useState } from "react";
import { Col, Container, Row, Table as BSTable, NavDropdown } from "react-bootstrap";
import Text from "./Text";
import { ArrowClockwise, ArrowLeftRight, PencilSquare, SortAlphaDown, SortAlphaUpAlt, Trash3 } from "react-bootstrap-icons";
import { ViewTransaction } from "./Images";
import Checkbox from "./Checkbox";
import TableCss from "styles/components/TableCss";

export interface TableProps {
  title?: string
  onMoreClick?: () => void
  columns: Array<TableColumn>
  data: any
  dropdownOptions?: boolean
  checkedList?: any
  setCheckedList?: Dispatch<SetStateAction<Object>>
  className?: string
  sort? :any
  setSort?: Dispatch<SetStateAction<any>>
  sortCol?: Array<string>
  setSortCol?: Dispatch<SetStateAction<string[]>>
  viewIcon?:boolean
  editIcon?: boolean
  deleteIcon?: boolean
  onViewClick?: (data) => void
  onEditClick?: (data) => void
  onDeleteClick?: (data) => void
}

interface TableColumn {
  key: string
  label: string | JSX.Element
}

const Table = ({
  title,
  columns,
  data,
  dropdownOptions = false,
  checkedList,
  setCheckedList,
  className,
  sort,
  setSort,
  sortCol,    //which column being sorting
  setSortCol,
  viewIcon = true,
  editIcon = true,
  deleteIcon=true,
  onViewClick,
  onEditClick,
  onDeleteClick
}: TableProps) => {
  const [checkboxIndex, setCheckboxIndex] = useState(null);

  const [columnOrder, setColumnOrder] = useState(columns.map((column) => column.key));

  useEffect(()=>{
    if(checkboxIndex !== null || !checkedList){
      setCheckedList((prevState) => ({
        ...prevState,
        [checkboxIndex]: !checkedList[checkboxIndex],
      }));
      setCheckboxIndex(null);
    }
  }, [checkboxIndex, checkedList, setCheckedList]);

  const handleColumnReorder = (index) => {
    const newColumnOrder = [...columnOrder];
    const movedColumn = newColumnOrder.splice(index, 1);
    newColumnOrder.splice(parseInt(index)+1, 0, movedColumn[0]);
    
    setColumnOrder(newColumnOrder);
  };

  const onSortClick = (key: string) => {
    setSort({...sort, [key]:!sort[key]}); 
    sortCol === null ?
      setSortCol([key])
    :
      sortCol.includes(key) ? 
        <>
          {sortCol.splice(sortCol.indexOf(key),1)}
          {setSortCol([key, ...sortCol])}
        </>
      : 
        setSortCol([key, ...sortCol])
  };

  return (
    <Container css={TableCss} className={className}>
      {title && (
        <Container>
          <Row>
            <Col>
              <Text label={title}/>
            </Col>
          </Row>
        </Container>
      )}
      <BSTable className="mb-0">
        {columns && (
          <thead>
            <tr>
              {columnOrder.map((key, index) => {
                const {label} = columns.find((column) => column.key === key)
                return (
                  dropdownOptions ?
                    <th key={index} className={checkedList[key] === false ? "d-none":""}>
                      <Container className="p-0 d-flex align-items-center">
                        {typeof label === "string" ?
                          <Text 
                            label={label} 
                            className="pe-2 table-title" 
                            onClick={()=>onSortClick(key)} 
                          />
                        :
                          label
                        }
                        {sortCol?.find((data)=>{return data === key}) === key &&
                          <Container 
                            onClick={()=>onSortClick(key)} 
                            className="p-0 w-auto m-0 align-items-center d-flex me-1"
                          >
                          {(sort[key] ?
                            <SortAlphaDown/>
                            :
                            <SortAlphaUpAlt/>
                          )}
                          </Container>
                        }
                        <NavDropdown title="" className="pe-2">
                          {columns.map(({key, label}, index) => {
                            return (
                              <NavDropdown.Item key={key}>
                                <Checkbox
                                  key={index} 
                                  label={typeof label === "string" ? label : ""}
                                  value={checkedList[key]}
                                  onClick={()=>{
                                    setCheckboxIndex(key);
                                  }}
                                  className="checkbox"
                                />
                              </NavDropdown.Item>
                            )
                          })}
                        </NavDropdown>
                        {(index !== (columns.length-1)) && <ArrowLeftRight size={13} onClick={()=>{handleColumnReorder(index)}}/>}
                      </Container>
                    </th>
                  :
                    <th key={index}>
                      <Container className="d-flex p-0 align-items-center">
                        <Container 
                          className="d-flex p-0 w-auto m-0 align-items-center" 
                          onClick={()=>onSortClick(key)} 
                        >
                        {typeof label === "string" ?
                          <Text label={label} className="table-title me-2"/>
                        :
                          label
                        }
                        {sortCol?.find((data)=>{return data === key}) === key &&
                          <Container 
                            onClick={()=>onSortClick(key)} 
                            className="p-0 w-auto m-0 align-items-center d-flex me-1"
                          >
                          {(sort[key] ?
                            <SortAlphaDown/>
                            :
                            <SortAlphaUpAlt/>
                          )}
                          </Container>
                        }
                      </Container>
                      {(index !== (columns.length-1)) && <ArrowLeftRight size={13} onClick={()=>{handleColumnReorder(index)}}/>}
                      </Container>
                    </th>
                )
              })}
              {viewIcon && <th></th>}
              {editIcon && <th></th>}
              {deleteIcon && <th><ArrowClockwise onClick={()=>{setSortCol(null)}}/></th>}
            </tr>
          </thead>
        )}
        {data && (
          <tbody>
            {data &&
            data.map((row, i) => (
              <tr key={i} className={i%2 === 0 ? "" : "table-bg"}>
                {columnOrder.map(( key ) => (
                  <td key={key} className={(!checkedList ? "" : (checkedList[key]) === false ? "d-none":"")}>
                    {typeof row[Object.keys(data[i])[key]] === "string" ?
                      <Text label={row[Object.keys(data[i])[key]]}/>
                      :
                      row[Object.keys(data[i])[key]]
                    }
                  </td>
                ))}
                {viewIcon && <td width={1}><ViewTransaction onClick={()=>onViewClick(row)}/></td>}
                {editIcon && <td width={1}><PencilSquare className="icon" onClick={()=>onEditClick(row)}/></td>}
                {deleteIcon && <td><Trash3 className="icon" onClick={()=>onDeleteClick(row)}/></td>}
              </tr>
            ))}
          </tbody>
        )}
      </BSTable>
    </Container>
  )
}

export const getTableData = (data, currentPage, rowsPerPage) => {
  const dataArray = [];

  //To know the starting data index that is gonna be displayed on current page
  const startIndex = (currentPage - 1) * rowsPerPage;

  //To know the last data index that is gonna be displayed on current page
  const endIndex = startIndex + rowsPerPage;

  /*  To avoid accessing elements that don't exist
      Example: Currently there is 54 data (maximum element index = 53).
      The endIndex for the last page will be 50+5=55.
      It exceeded the amount of elements available leading to error.
      With the adjusted end index, if the endIndex exceed, it will choose the maximum available index in tableData
  */
  const accurateEndIndex = Math.min(endIndex, data.length);

  for(let i = startIndex; i < accurateEndIndex; i++)
  {
      dataArray.push(data[i]);
  }

  return dataArray;
}; 

export default Table;